// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/body.footer
// assets/head.header

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsBodyfooter = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x4d\x73\xe3\x28\x13\x3e\x8f\x7e\x05\xa1\x52\x1e\x18\x13\x6c\xcf" +
	"\x7b\x93\x43\x5c\xef\xcc\x6c\xed\x79\x6b\x77\xe7\xb0\xa9\x1c\x88\x68\x49\xcc\x60\xd0\x02\x8a\xe3\x72\xfc\xdf\xb7" +
	"\x90\x2d\x59\x76\xbc\x7b\xc1\x74\x43\x77\xf3\x3c\xfd\x21\xdf\x87\xc2\xeb\x26\x3e\x64\xd9\xec\x53\xf6\xe1\xff\x28" +
	"\xe8\x75\x63\x80\x21\xa3\xab\x3a\x6e\x20\xad\xe8\xc7\x6f\x2d\xf8\x2d\x6a\x4c\x5b\x69\x8b\x4a\xe7\x51\xe1\x41\x46" +
	"\x6d\x2b\x14\x9c\x8f\xf2\xd9\x00\xea\xd6\xc0\xb3\x0f\x75\x8c\x4d\xc8\x67\xb3\x4a\xc7\xba\x7d\xe6\x85\x5b\xcf\x7e" +
	"\x6e\x0d\x94\xee\x75\xf6\xe3\xef\xe4\xe7\xee\x70\xd5\xf9\x98\x7d\xf8\x0e\x3e\x68\x67\xd1\x9c\xcf\xf9\x62\x91\x7d" +
	"\x9a\x65\x37\x65\x6b\x8b\xa8\x9d\x25\x91\xee\x22\x1f\xee\x8a\x41\x0f\x2c\xd0\xdd\x8b\xf4\x48\x8b\x58\xeb\xb0\x4c" +
	"\x0b\xbf\xed\x2e\x0a\x60\x47\xa9\x06\xa9\xc4\xe8\x84\x97\xda\x2a\x82\x3b\x3d\xa6\x87\x5b\x01\x62\xc2\x10\x44\xe4" +
	"\xf0\x1a\xc1\x2a\xb2\xdb\xb3\x51\x48\xae\xa0\x94\xad\x89\x81\x85\xa3\xc5\x6d\x52\x7f\x05\x63\x82\x18\xc5\xe1\x06" +
	"\x6c\x15\xeb\x87\xf9\x6a\xac\xec\x03\xe6\xd6\x45\xc2\xad\xbb\x4b\xb6\x14\xd3\xfc\xda\xab\x2e\x2f\x5d\x86\xe3\xce" +
	"\x12\x5c\x18\x5d\xfc\x3c\x3d\x0f\xb3\x81\x12\xba\xd3\x3c\xa9\x48\x24\xc9\x90\xd2\xfd\xd1\x83\xb6\x0a\x5e\x85\x6d" +
	"\x8d\x19\x88\x19\x49\x4a\x7b\xe8\x1c\x74\xba\x73\xec\x8d\x77\xd1\xc5\x6d\x03\x62\x97\xe4\xfc\x1a\xfd\x16\x36\xe8" +
	"\x9b\x8c\xc0\x6c\x47\x07\x73\x63\xc6\x99\x11\xae\xc7\xf7\xec\xd4\x16\xd3\x13\x4f\x17\x07\xb9\x63\x52\x98\x5e\xe7" +
	"\x31\xe5\xb5\x0c\x04\x47\xc5\x50\xac\x31\x65\x5e\xc8\xe3\x61\x6e\x63\x7d\x57\xd4\xda\x28\x82\xa7\x04\x0e\xf8\x08" +
	"\x9d\x2e\xe8\x14\x53\x4c\x79\xa9\x4d\x04\x3f\x32\x55\x02\xb8\x92\x51\x12\xda\x11\xf4\x65\xcb\x6a\xf1\xf8\xc4\x0a" +
	"\xe1\xf9\x5a\x36\x64\x40\x15\x98\xa6\x3b\x0f\xb1\xf5\x16\xa9\x15\xee\xf5\x58\x88\xc4\x81\x2b\x91\x5a\x29\x12\x09" +
	"\x50\x16\x89\xa6\xcc\xd2\x5c\xe5\x89\xb4\x1b\x71\xa4\x7c\x1c\xe5\xbb\x34\x2d\xac\xfe\xed\x20\xef\x0f\x22\xbc\x46" +
	"\x42\xf7\x74\x39\xbf\x11\xa2\x38\xb2\x33\x99\x90\x53\xe6\x6e\x84\x18\x30\xae\xc8\x45\xce\xb0\x0c\x05\x1e\xa7\x79" +
	"\xb8\x4a\xf3\xee\xec\x46\x88\x30\x99\x60\x05\xc7\xfd\xea\x9a\x03\x21\xc4\xb9\x7a\x75\x30\x38\xb8\xc8\x2f\x4c\x02" +
	"\x0b\xbd\xd9\x85\xd5\x22\xbf\x5b\x30\xdb\xd7\x75\xf4\xba\xaa\xba\x44\xf4\x05\x95\x87\x28\x53\xcd\x3e\xda\x27\xca" +
	"\x2c\x37\xae\x22\xf8\x77\xe7\xbb\x21\xf2\xbc\x45\x78\x7a\x02\x32\xc5\xbd\x38\xb8\xa7\x27\xd7\x45\x08\x04\x2b\x1d" +
	"\x1a\x23\xb7\x98\xb2\x00\xf1\x0f\xbd\x06\xd7\x46\x32\x6a\x07\x3b\xee\x1d\x0f\x6b\xf7\x02\x5f\x8d\x0c\x81\xd8\xa1" +
	"\xeb\xb9\x0c\x45\x17\x69\xa4\x4a\xc8\xe9\xb2\x74\x9e\xa4\x02\x77\x62\xce\xd4\x90\x98\xa5\xbb\x57\x4b\x37\x9d\xd2" +
	"\x9a\x37\x6d\xa8\xc9\xae\x7b\x6b\xee\x58\x01\xc6\xe4\xfe\xd1\x3d\x31\xef\x36\xb9\x4c\x9b\x97\x2e\xcf\xc5\xa3\x7b" +
	"\xda\xd3\x65\x7d\x68\xcd\xd3\x5c\x63\x30\x94\xda\x28\x76\xe1\xd6\x8d\xf4\x40\x22\xef\xac\x19\x1c\x7e\xe9\xa7\x90" +
	"\x9a\x99\x83\x2c\x6a\x52\xb3\x73\x2f\x86\xcb\xa6\x49\x83\x0b\xb8\x77\x9b\xd4\xf5\xc0\xa5\x52\x97\x50\x1f\xed\x89" +
	"\xc9\x73\xf6\x51\xa9\xad\x0e\x35\x28\xa4\x2d\xc2\x53\x42\xfa\x96\xa6\xbc\x3a\x10\x4b\xe8\x9d\x3e\xed\xe9\x14\xaf" +
	"\x03\xa6\xff\x99\xe8\x04\xc4\x40\x84\x21\xd7\x57\x13\xb7\x67\x3d\xb1\x0f\x9f\xe1\x7f\xab\xcf\xf3\x79\xbe\x98\x53" +
	"\xba\x67\xc6\x55\xa3\x61\x43\x77\x64\x3c\x95\xbe\xfd\xf2\xe5\xcf\x5f\xdf\xde\xce\xc6\x37\x57\xf0\xdc\x56\x74\x32" +
	"\x29\x9c\x0d\xce\xc0\xb0\x49\x30\xcf\x04\x82\x1f\x07\x57\x4f\x08\x4f\x81\xee\x99\x82\x10\xbd\xdb\xe6\xa3\xe2\x39" +
	"\xe6\xe6\xdd\x08\x2e\xcb\xf7\x33\xb8\x9f\xd4\x07\x88\x5d\xab\xe3\xd1\x84\x4e\x23\x82\x76\xeb\xfe\x7c\xbc\x76\x40" +
	"\xc4\xcd\xe2\xea\xf7\x46\xec\x3a\x48\xf9\x3b\x03\x26\x43\x91\xe3\x24\x83\x42\x32\x14\x60\x95\xb6\x15\x4e\x20\x4e" +
	"\xfa\x24\xf4\x07\xc7\xa2\xca\xaf\x16\x5f\x7c\x80\xd5\x22\x8f\xf7\xb0\xba\x5b\xe4\xf3\xee\x81\xa5\xbd\xfa\xc5\x3d" +
	"\x0c\xfc\xc0\xf4\x72\xcc\x4d\x57\x92\x23\xde\x42\x3f\x0b\x99\x16\xe1\x1d\x17\x94\xe9\xc9\x44\xf3\x23\xdf\x84\xb2" +
	"\xf7\x57\x58\xaa\xbe\x11\x68\x12\x18\xa4\x6f\xd9\x7e\x4f\x36\xda\x2a\xb7\xe1\x7f\x41\x13\xdd\xdb\xdb\x51\x3a\xfc" +
	"\x2f\xa1\xcb\x2c\xcb\xb2\x5b\x82\x94\x2b\xda\x35\xd8\x88\x28\xf7\x20\xd5\x76\xf4\x36\xb4\xcb\x10\xba\x25\x1f\x3b" +
	"\xd7\x1f\xe9\x28\x04\x5d\x66\xfb\xe4\xe1\x7e\x36\xfc\x11\xfa\x27\x00\x00\xff\xff\xb4\x77\x36\xb7\x13\x09\x00\x00" +
	"")

func bindataAssetsBodyfooterBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsBodyfooter,
		"assets/body.footer",
	)
}



func bindataAssetsBodyfooter() (*asset, error) {
	bytes, err := bindataAssetsBodyfooterBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/body.footer",
		size: 2323,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582493552, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsHeadheader = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x41\x8e\xe3\x20\x10\x05\xd0\x3d\xa7\xa8\xc9\x7a\x00\x7b\x37\xe3" +
	"\x38\xbe\x0b\xc6\xe0\x54\x02\x94\xa7\x0a\x2b\xb1\x46\x7d\xf7\x56\x12\xab\xa5\xa8\xa5\xde\xfd\xc5\xe7\x7d\x54\xbd" +
	"\x78\xc6\xa5\x82\xb0\x3f\x1d\xce\xb5\x2e\x9d\xb5\x9e\xa6\x60\x2e\xff\xd6\xc0\x9b\xf1\x94\xed\x2b\xea\xe4\x6a\x90" +
	"\x6a\x32\x16\x73\x91\xc3\xd0\xdb\xd7\xd3\x41\x7d\x33\xa4\xb3\xf6\x8a\xd5\x44\x2a\xd5\xdd\x82\x50\x0e\x4f\xa8\xfd" +
	"\xfb\xc7\xb7\x6d\xd3\xc4\xe6\x21\x80\x67\x12\x21\xc6\x19\xcb\xe9\xe0\x0a\x95\x2d\xd3\xfa\x26\xab\x5e\xea\x96\xc2" +
	"\xa0\x46\x9a\x36\xf8\xaf\x00\x46\xe7\xaf\x33\xd3\x5a\x26\xed\x29\x11\x77\x70\x3b\x63\x0d\x47\x05\x90\x1d\xcf\x58" +
	"\x3a\x68\x9b\xe5\x7e\x54\x1f\x4a\x01\xf4\xbf\xb4\x06\xbf\x4a\xa5\x0c\x0f\x09\xcb\x0c\x91\x18\x5c\x4a\x80\x9e\x8a" +
	"\x80\xd6\x83\x02\x40\x13\x9d\xfc\xde\xc3\xf8\x1c\x02\x18\x89\xa7\xc0\x1d\xb4\xcb\x1d\x84\x12\x4e\xc0\x61\x7a\x0c" +
	"\xfd\x48\xcb\x12\x3c\x46\xf4\x6f\xbe\x89\x4e\x47\x94\xf3\x2e\xef\x3f\x17\x97\x32\x95\x2f\xf1\x59\x62\x9a\xdf\x4b" +
	"\x33\x87\xb0\x77\x7a\xbb\x5f\xe3\x33\x00\x00\xff\xff\x6d\xc5\x4d\x54\xb5\x01\x00\x00")

func bindataAssetsHeadheaderBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsHeadheader,
		"assets/head.header",
	)
}



func bindataAssetsHeadheader() (*asset, error) {
	bytes, err := bindataAssetsHeadheaderBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/head.header",
		size: 437,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582492291, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/body.footer": bindataAssetsBodyfooter,
	"assets/head.header": bindataAssetsHeadheader,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"body.footer": {Func: bindataAssetsBodyfooter, Children: map[string]*bintree{}},
		"head.header": {Func: bindataAssetsHeadheader, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
